// layout-grid-mixins //

@mixin layout-grid-media-query_($size) {

  @if $size == phone {
    @media (max-width: map-get($layout-grid-breakpoints, tablet) - 1px) {
      @content;
    }
  }

  @if $size == tablet {
    @media (min-width: map-get($layout-grid-breakpoints, tablet)) and (max-width: map-get($layout-grid-breakpoints, desktop) - 1px) {
      @content;
    }
  }

  @if $size == desktop {
    @media (min-width: map-get($layout-grid-breakpoints, desktop)) {
      @content;
    }
  }
}

@mixin layout-grid-cell-span_($size, $span, $gutter) {
  $percent: percentage($span / map-get($layout-grid-columns, $size));

  @if $percent > 100% {
    $percent: 100%;
  }

  width: calc(#{$percent} - #{$gutter});
  width: calc(#{$percent} - var(--layout-grid-gutter, #{$gutter}));

  @supports (display: grid) {
    width: auto;
    grid-column-end: span min($span, map-get($layout-grid-columns, $size));
  }
}

@mixin layout-grid-cell-spans_($span, $gutter) {
  @each $size in map-keys($layout-grid-columns) {
    @include layout-grid-media-query_($size) {
      @include layout-grid-cell-span_($size, $span, $gutter);
    }
  }
}

@mixin layout-grid($margin, $gutter, $max-width: null) {
  display: flex;
  flex-flow: row wrap;
  align-items: stretch;
  margin: 0 auto;
  box-sizing: border-box;
  padding: $margin - $gutter / 2;
  padding: calc(var(--layout-grid-margin, #{$margin}) - var(--layout-grid-gutter, #{$gutter}) / 2);

  @if $max-width {
    max-width: $max-width;
  }

  @supports (display: grid) {
    display: grid;
    grid-gap: $gutter;
    grid-gap: var(--layout-grid-gutter, $gutter);
    padding: $margin;
    padding: var(--layout-grid-margin, #{$margin});

    @each $size in map-keys($layout-grid-columns) {
      @include layout-grid-media-query_($size) {
        grid-template-columns: repeat(map-get($layout-grid-columns, $size), minmax(0, 1fr));
      }
    }
  }
}

@mixin layout-grid-cell($gutter, $span: 4) {
  margin: $gutter / 2;
  margin: calc(var(--layout-grid-gutter, #{$gutter}) / 2);
  box-sizing: border-box;

  @supports (display: grid) {
    margin: 0;
  }

  @include layout-grid-cell-spans_($span, $gutter);
}

@mixin layout-grid-cell-order($order) {
  order: $order;
}

@mixin layout-grid-cell-align($position) {
  @if $position == "top" {
    align-self: flex-start;

    @supports (display: grid) {
      align-self: start;
    }
  }

  @if $position == "middle" {
    align-self: center;
  }

  @if $position == "bottom" {}
}

//
